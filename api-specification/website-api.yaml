openapi: 3.0.3
info:
  title: Website Downloader Server - OpenAPI 3.0
  description: This is a Website Downloader Server API based on the OpenAPI 3.0 specification.
  termsOfService: https://www.backbase.com
  contact:
    name: Contact the Developer
    url: https://www.linkedin.com/in/mateusz-aleksandrowicz/
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0
externalDocs:
  description: Find out more about Website Donwloader Server
  url: http://swagger.io
servers:
  - url: https://petstore3.swagger.io/api/v3
tags:
  - name: website
    description: API related to website resources
paths:
  /website:
    post:
      tags:
        - website
      summary: Downloads a new website
      description: Downloads a new website based on website's url
      operationId: downloadWebsite
      requestBody:
        description: Url of website to be wdownloaded
        content:
          application/json:
            schema:
              type: string
              example: https://www.backbase.com
        required: true
      responses:
        '200':
          $ref: '#/components/responses/Response'
        '400':
          $ref: '#/components/responses/ErrorResponse'
    get:
      tags:
        - website
      summary: Gets all downloaded websites
      description: Returns ids and urls of all downloaded websites
      operationId: getAllWebsites
      responses:
        '200':
          description: List of all downloaded websites
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WebsiteList'
  /website/{id}:
    get:
      tags:
        - website
      summary: Gets website html
      description: Returns a website's html by its id
      operationId: getWebsite
      parameters:
        - name: id
          in: path
          description: id of the website
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: HTML code of the page
          content:
            application/json:
              schema:
                type: string
                example: <!DOCTYPE html><html><body><h1>Heading 1</h1></body></html>
        '404':
          $ref: '#/components/responses/ErrorResponse'
    delete:
      tags:
        - website
      summary: Deletes a website
      description: Delete a website by its id
      operationId: deleteWebsite
      parameters:
        - name: id
          in: path
          description: Website id to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          $ref: '#/components/responses/Response'
        '404':
          $ref: '#/components/responses/ErrorResponse'
components:
  schemas:
    WebsiteList:
      description: List of websites
      type: array
      items:
        $ref: '#/components/schemas/Website'
    Website:
      description: Model represents a website
      type: object
      required:
        - id
        - url
      properties:
        id:
          type: integer
          format: int64
          example: 10
        url:
          type: string
          example: https://www.backbase.com
    Response:
      description: Model represents a response for successful operation
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: string
          example: WEBSITE_DOWNLOADED
        message:
          type: string
          example: Website downloaded successfully
    ErrorResponse:
      description: Model represents a response for error
      allOf:
        - $ref: '#/components/schemas/Response'
        - type: object
          required:
            - uuid
          properties:
            uuid:
              type: string
              example: f9846d09-215f-457d-8f37-88a20717b4f3
  responses:
    Response:
      description: Response for successful operation with context information
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Response'
    ErrorResponse:
      description: Response for error with context information
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'